// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.19;

import {TransferHelper} from "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import {SwapAndXCall} from "../../origin/Swap/SwapAndXCall.sol";
import {TestHelper} from "../utils/TestHelper.sol";
import {Greeter} from "../utils/Greeter.sol";
import {XSwapAndGreetTarget} from "../../example/XSwapAndGreet/XSwapAndGreetTarget.sol";
import {OneInchUniswapV3} from "../../shared/Swap/OneInch/OneInchUniswapV3.sol";

contract AnyToAnySwapAndForwardTest is TestHelper {
  SwapAndXCall swapAndXCall;
  Greeter greeter;
  XSwapAndGreetTarget xSwapAndGreetTarget;
  OneInchUniswapV3 oneInchUniswapV3;

  address public immutable OP_OP = 0x4200000000000000000000000000000000000042;
  address public immutable OP_USDC = 0x7F5c764cBc14f9669B88837ca1490cCa17c31607;
  address public immutable ARB_ARB = 0x912CE59144191C1204E64559FE8253a0e49E6548;

  address public immutable OP_OP_WHALE = 0x2501c477D0A35545a387Aa4A3EEe4292A9a8B3F0;
  address public immutable ONEINCH_SWAPPER = 0x1111111254EEB25477B68fb85Ed929f73A960582;

  function utils_setUpOrigin() public {
    setUpOptimism(87307161);
    swapAndXCall = new SwapAndXCall(CONNEXT_OPTIMISM);
    vm.prank(OP_OP_WHALE);
    TransferHelper.safeTransfer(OP_OP, address(this), 1000 ether);

    vm.label(address(swapAndXCall), "SwapAndXCall");
    vm.label(address(this), "AnyToAnySwapAndForwardTest");
    vm.label(OP_OP, "OP_OP");
    vm.label(OP_USDC, "OP_USDC");
    vm.label(OP_OP_WHALE, "OP_OP_WHALE");
  }

  function utils_setUpDestination() public {
    setUpArbitrum(78000226);
    greeter = new Greeter();
    xSwapAndGreetTarget = new XSwapAndGreetTarget(address(greeter), MOCK_CONNEXT);
    oneInchUniswapV3 = new OneInchUniswapV3(ONEINCH_SWAPPER);
    xSwapAndGreetTarget.addSwapper(address(oneInchUniswapV3)); // 1inch address on arbitrum

    vm.label(address(greeter), "Greeter");
    vm.label(address(xSwapAndGreetTarget), "XSwapAndGreetTarget");
    vm.label(address(oneInchUniswapV3), "OneInchUniswapV3");
    vm.label(ARB_ARB, "ARB_ARB");
  }

  function test_AnyToAnySwapAndForwardTest__works() public {
    utils_setUpOrigin();
    utils_setUpDestination();

    vm.selectFork(optimismForkUrl);

    // origin
    // start with OP and swap to USDC to bridge to destination
    TransferHelper.safeApprove(OP_OP, address(swapAndXCall), 1000 ether);
    bytes
      memory oneInchApiDataOpToUsdc = hex"12aa3caf000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a00000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f00000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000000000000858aa792000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007950000000000000000000000000000000000000000000007770007490006ff00a0c9e75c48000000000000000504010000000000000000000000000000000000000000000006d100050400034100a007e5c0d200000000000000000000000000000000000000000000000000031d0001cd00a0c9e75c4800000000000000001e1400000000000000000000000000000000000000000000000000019f00004f02a000000000000000000000000000000000000000000000000000aaff29a8c245a9ee63c1e500fc1f3296458f9b2a27a0b91dd7681c4020e09d0542000000000000000000000000000000000000425126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100800069bb5c0700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a000000000000000000000000000000000000000000000000000000006436c07400000000000000000000000000000000000000000000000000000000000000010000000000000000000000004200000000000000000000000000000000000042000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000005126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000060004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d59b4b200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a000000000000000000000000000000000000000000000000000000006436c074000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000060000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000000a007e5c0d200000000000000000000000000000000000000000000000000019f00004f02a00000000000000000000000000000000000000000000000122f03b9df87111aa3ee63c1e501d7e6b9c52cd0a3ba8b9a77b2769f82feac89041e42000000000000000000000000000000000000425126a132dab612db5cb9fc9ac426a0cc215a3423f9c98700daec35af8ff88c16bdf0418774cb3d7599b40004f41766d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000356f1d4c00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a000000000000000000000000000000000000000000000000000000006436c07400000000000000000000000000000000000000000000000000000000000000010000000000000000000000008700daec35af8ff88c16bdf0418774cb3d7599b40000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000000a0c9e75c4800000000000000001f1300000000000000000000000000000000000000000000000000019f00004f02a000000000000000000000000000000000000000000000000000000000195edd99ee63c1e5011d751bc1a723accf1942122ca9aa82d49d08d2ae42000000000000000000000000000000000000425126a132dab612db5cb9fc9ac426a0cc215a3423f9c942000000000000000000000000000000000000420004f41766d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002962f7f900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f0694acc9e941b176e17b9ef923e71e7b8b2477a000000000000000000000000000000000000000000000000000000006436c074000000000000000000000000000000000000000000000000000000000000000100000000000000000000000042000000000000000000000000000000000000420000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000000000a0f2fa6b667f5c764cbc14f9669b88837ca1490cca17c316070000000000000000000000000000000000000000000000000000000086e3f96d00000000000000000000000000989d1080a06c4eca277f5c764cbc14f9669b88837ca1490cca17c316071111111254eeb25477b68fb85ed929f73a9605820000000000000000000000cfee7c08";

    // destination
    // set up destination swap params
    bytes
      memory oneInchApiDataUsdcToArb = hex"e449022e000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000004aa05425d2de542d5e37c0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000180000000000000000000000081c48d31365e6b526f6bbadc5c9aafd822134863cfee7c08";
    bytes memory _forwardCallData = abi.encode("Hello, Connext!");
    bytes memory _swapperData = abi.encode(
      address(oneInchUniswapV3),
      ARB_ARB,
      oneInchApiDataUsdcToArb,
      _forwardCallData
    );

    // final calldata includes both origin and destination swaps
    bytes memory callData = abi.encode(address(1), _swapperData);
    // set up swap calldata
    swapAndXCall.swapAndXCall(
      OP_OP,
      OP_USDC,
      1000 ether,
      ONEINCH_SWAPPER,
      oneInchApiDataOpToUsdc,
      ARBITRUM_DOMAIN_ID,
      address(greeter),
      address(this),
      300,
      callData,
      123 // fake relayer fee, will be in USDC
    );
  }
}

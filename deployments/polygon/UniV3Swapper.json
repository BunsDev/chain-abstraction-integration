{
  "address": "0x9aC21E7373E64B8C60e3C1f70c6D43da3aF016d4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniV3Router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Router",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c54edf650c9902e616949ab372c4e15e0cd75923723ac0ef4b9f62f918d8e2e",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0x9aC21E7373E64B8C60e3C1f70c6D43da3aF016d4",
    "transactionIndex": 6,
    "gasUsed": "375383",
    "logsBloom": "0x
    "blockHash": "0x87e5d2da70df39f9c98949c685183293e65e6d62943bbf7371b9110b235f8e7c",
    "transactionHash": "0x8c54edf650c9902e616949ab372c4e15e0cd75923723ac0ef4b9f62f918d8e2e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 41811488,
        "transactionHash": "0x8c54edf650c9902e616949ab372c4e15e0cd75923723ac0ef4b9f62f918d8e2e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e",
          "0x00000000000000000000000009385a960a2e0b6b4516d341534da92cb2a50085"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000813b873c45894900000000000000000000000000000000000000000000000593213bf02f6e100c0000000000000000000000000000000000000000000008f2ea18025a0b7ab40100000000000000000000000000000000000000000000000592a00068f32886c30000000000000000000000000000000000000000000008f2ea993de147c03d4a",
        "logIndex": 31,
        "blockHash": "0x87e5d2da70df39f9c98949c685183293e65e6d62943bbf7371b9110b235f8e7c"
      }
    ],
    "blockNumber": 41811488,
    "cumulativeGasUsed": "883779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 1,
  "solcInputHash": "3d6ea6ceed383d9e191019c3df5eb497",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniV3Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swap(uint256,address,address,bytes)\":{\"details\":\"Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.\",\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the 1inch aggregator router.\",\"_toAsset\":\"Address of the token to swap to.\"}}},\"title\":\"UniV3Swapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(uint256,address,address,bytes)\":{\"notice\":\"Swap the given amount of tokens using 1inch.\"}},\"notice\":\"Swapper contract for UniswapV3 swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/Swap/Uniswap/UniV3Swapper.sol\":\"UniV3Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":connext-interfaces/=lib/connext-interfaces/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":vulcan/=lib/vulcan/src/\"],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/Swap/Uniswap/UniV3Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ISwapper} from \\\"../interfaces/ISwapper.sol\\\";\\n\\n/**\\n * @title UniV3Swapper\\n * @notice Swapper contract for UniswapV3 swaps.\\n */\\ncontract UniV3Swapper is ISwapper {\\n  using Address for address;\\n\\n  ISwapRouter public immutable uniswapV3Router;\\n\\n  constructor(address _uniV3Router) {\\n    uniswapV3Router = ISwapRouter(_uniV3Router);\\n  }\\n\\n  /**\\n   * @notice Swap the given amount of tokens using 1inch.\\n   * @dev Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known\\n   * until the funds are transferred to this contract.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the 1inch aggregator router.\\n   */\\n  function swap(\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData\\n  ) public payable override returns (uint256 amountOut) {\\n    // transfer the funds to be swapped from the sender into this contract\\n    TransferHelper.safeTransferFrom(_fromAsset, msg.sender, address(this), _amountIn);\\n\\n    (uint24 poolFee, uint256 amountOutMin) = abi.decode(_swapData, (uint24, uint256));\\n\\n    if (_fromAsset != _toAsset) {\\n      TransferHelper.safeApprove(_fromAsset, address(uniswapV3Router), _amountIn);\\n      // Set up uniswap swap params.\\n      ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n        tokenIn: _fromAsset,\\n        tokenOut: _toAsset,\\n        fee: poolFee,\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: _amountIn,\\n        amountOutMinimum: amountOutMin,\\n        sqrtPriceLimitX96: 0\\n      });\\n\\n      // The call to `exactInputSingle` executes the swap.\\n      amountOut = ISwapRouter(uniswapV3Router).exactInputSingle(params);\\n    }\\n\\n    // transfer the swapped funds back to the sender\\n    TransferHelper.safeTransfer(_toAsset, msg.sender, amountOut);\\n  }\\n}\\n\",\"keccak256\":\"0x8cd6baf424d02c2677e1a417001d765242c75090a442306e3b4c3390761abb5a\",\"license\":\"UNLICENSED\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function swap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xfc3867980a06fa00115ee73e28748eed649931199f99138f1af1a0a17a65730b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a03461007a57601f61066238819003918201601f19168301916001600160401b0383118484101761007f5780849260209460405283398101031261007a57516001600160a01b0381169081900361007a576080526040516105cc908161009682396080518181816102240152818161039601526104ed0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081632c76d7a6146104da575063a2c554d31461003557600080fd5b60803660031901126103f8576024356001600160a01b03811690036103f8576044356001600160a01b03811690036103f85767ffffffffffffffff606435116103f8573660236064350112156103f8576064356004013567ffffffffffffffff81116103f857366024826064350101116103f8576000906040516323b872dd60e01b60208201523360248201523060448201526004356064820152606481528060a081011067ffffffffffffffff60a0830111176104115760008160a0829301604052602081519101826024355af161010c61053e565b816104ab575b501561048057604090606435906064350103126103f8576024606435013562ffffff811681036103f8576001600160a01b03604435811660243590911603610212575b5060405163a9059cbb60e01b602082019081523360248301526044820183905260009182919061019281606481015b03601f19810183528261051c565b5190826044355af16101a261053e565b816101e3575b50156101b957602090604051908152f35b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b80518015925082156101f8575b5050386101a8565b61020b925060208091830101910161057e565b38806101f0565b60405163095ea7b360e01b60208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660248201526004356044820152909150600090819061026e8160648101610184565b602081519101826024355af161028261053e565b81610451575b501561042757604051908161010081011067ffffffffffffffff610100840111176104115762ffffff90610100830160405260018060a01b0360243516835260018060a01b0360443516602084015216604082015230606082015242608082015260043560a08201526044606435013560c0820152600060e08201526040519063414bf38960e01b825260018060a01b03815116600483015260018060a01b03602082015116602483015262ffffff604082015116604483015260018060a01b0360608201511660648301526080810151608483015260a081015160a483015260c081015160c483015260e060018060a01b039101511660e482015260208161010481600060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1908115610405576000916103ce575b5038610155565b90506020813d6020116103fd575b816103e96020938361051c565b810103126103f85751386103c7565b600080fd5b3d91506103dc565b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610466575b505038610288565b610479925060208091830101910161057e565b388061045e565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156104c0575b505038610112565b6104d3925060208091830101910161057e565b38806104b8565b346103f85760003660031901126103f8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff82111761041157604052565b3d15610579573d9067ffffffffffffffff8211610411576040519161056d601f8201601f19166020018461051c565b82523d6000602084013e565b606090565b908160209103126103f8575180151581036103f8579056fea264697066735822122088e6f1e61d887206b870776cd92a16b946aad4aa9513dfd20af37ca02e7e35e764736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081632c76d7a6146104da575063a2c554d31461003557600080fd5b60803660031901126103f8576024356001600160a01b03811690036103f8576044356001600160a01b03811690036103f85767ffffffffffffffff606435116103f8573660236064350112156103f8576064356004013567ffffffffffffffff81116103f857366024826064350101116103f8576000906040516323b872dd60e01b60208201523360248201523060448201526004356064820152606481528060a081011067ffffffffffffffff60a0830111176104115760008160a0829301604052602081519101826024355af161010c61053e565b816104ab575b501561048057604090606435906064350103126103f8576024606435013562ffffff811681036103f8576001600160a01b03604435811660243590911603610212575b5060405163a9059cbb60e01b602082019081523360248301526044820183905260009182919061019281606481015b03601f19810183528261051c565b5190826044355af16101a261053e565b816101e3575b50156101b957602090604051908152f35b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b80518015925082156101f8575b5050386101a8565b61020b925060208091830101910161057e565b38806101f0565b60405163095ea7b360e01b60208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660248201526004356044820152909150600090819061026e8160648101610184565b602081519101826024355af161028261053e565b81610451575b501561042757604051908161010081011067ffffffffffffffff610100840111176104115762ffffff90610100830160405260018060a01b0360243516835260018060a01b0360443516602084015216604082015230606082015242608082015260043560a08201526044606435013560c0820152600060e08201526040519063414bf38960e01b825260018060a01b03815116600483015260018060a01b03602082015116602483015262ffffff604082015116604483015260018060a01b0360608201511660648301526080810151608483015260a081015160a483015260c081015160c483015260e060018060a01b039101511660e482015260208161010481600060018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1908115610405576000916103ce575b5038610155565b90506020813d6020116103fd575b816103e96020938361051c565b810103126103f85751386103c7565b600080fd5b3d91506103dc565b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610466575b505038610288565b610479925060208091830101910161057e565b388061045e565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156104c0575b505038610112565b6104d3925060208091830101910161057e565b38806104b8565b346103f85760003660031901126103f8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff82111761041157604052565b3d15610579573d9067ffffffffffffffff8211610411576040519161056d601f8201601f19166020018461051c565b82523d6000602084013e565b606090565b908160209103126103f8575180151581036103f8579056fea264697066735822122088e6f1e61d887206b870776cd92a16b946aad4aa9513dfd20af37ca02e7e35e764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swap(uint256,address,address,bytes)": {
        "details": "Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.",
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the 1inch aggregator router.",
          "_toAsset": "Address of the token to swap to."
        }
      }
    },
    "title": "UniV3Swapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap(uint256,address,address,bytes)": {
        "notice": "Swap the given amount of tokens using 1inch."
      }
    },
    "notice": "Swapper contract for UniswapV3 swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}